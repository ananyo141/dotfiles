# interpreter for shell commands
set shell bash
set drawbox
set icons true
set previewer ~/.config/lf/preview.sh
set incsearch true
set ignorecase true
set mouse on
set colors true
set number true
set relativenumber true
set sortby time

# set '-eu' options for shell commands
# Option '-e' is used to exit on error and option '-u' is used to give error for unset variables.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# Split file names in $fs and $fx properly
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 3

# use enter for shell commands
map <enter> shell

# open a file
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
map r push :rename<space>

# make sure trash folder exists
%mkdir -p ~/.trash

# move current file or selected files to trash folder
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# Make new directory
cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
# }}

# Make new file
cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

# show progress on copying
cmd paste &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy)
            rsync -av --ignore-existing --progress -- "$@" . |
            stdbuf -i0 -o0 -e0 tr '\r' '\n' |
            while IFS= read -r line; do
                lf -remote "send $id echo $line"
            done
            ;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

# Bindings
# mouse binds
map <m-up>    up
map <m-down>  down

# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map ux extract

# Basic Functions
map . set hidden!
map DD delete
map p paste
map x cut
map y copy
map R reload
map mf mkfile
map md mkdir
map C clear

# Movement
map gd cd ~/Downloads
map gq cd ~/Downloads/qbittorrent
map gp cd ~/Downloads/Programming\ Materials
map gc cd ~/.config
map gr cd ~/Repositories
map gv cd ~/Videos

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

